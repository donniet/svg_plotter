#version 300 es
// an attribute is an input (in) to a vertex shader.
// It will receive data from a buffer

in vec2 a_position;

out vec2 pos;
out vec4 col;

uniform mat3 u_view;
uniform vec2 u_range;

uniform vec4 u_stop_colors[STOPS];
uniform float u_stop_offsets[STOPS];
uniform vec2 u_linear_gradient[2];

// TODO: can't use these to switch since our defines are added to the top
#define COLOR_SPACE_HSL 1
#define COLOR_SPACE_RGB 2

#include "hsl.glsl"

vec4 gradient_color(vec2 pos)
{
    // is this actually a gradient?
#if !defined(STOPS) || STOPS == 0
    return u_fill_color;
#elif STOPS == 1
    return u_stop_colors[0];
#else
    vec2 g = u_linear_gradient[1] - u_linear_gradient[0];

    float p = dot(pos - u_linear_gradient[0], g);
    p /= dot(g, g);

    if(p < 0. || p > 1.)
        p = mod(p, 1.);

    int stop = 0;
    for(; stop < STOPS - 1; stop++)
        if(p >= u_stop_offsets[stop] && p < u_stop_offsets[stop+1])
            break;

    // switch(stop)
    // {
    //     case 0: return vec4(1,0,0,1);
    //     case 1: return vec4(0,1,0,1);
    //     case 2: 
    //     default:
    //         return vec4(0,0,1,1);
    // }


    float q = (p - u_stop_offsets[stop]) / (u_stop_offsets[stop+1] - u_stop_offsets[stop]);

    // vec4 c0 = vec4(hsl2rgb(u_stop_colors[stop].xyz), u_stop_colors[stop].w);
    // vec4 c1 = vec4(hsl2rgb(u_stop_colors[stop+1].xyz), u_stop_colors[stop+1].w);
    vec4 c0 = u_stop_colors[stop];
    vec4 c1 = u_stop_colors[stop+1];

    vec4 c = c0 + q * (c1 - c0);


    // c = u_stop_colors[stop];

    // #if COLOR_SPACE == COLOR_SPACE_HSL
        c.rgb = hsl2rgb(c.xyz);
    // #endif

    return c;
#endif
}

// all shaders have a main function
void main() 
{
    // gl_Position is a special variable a vertex shader
    // is responsible for setting
    vec2 p = a_position;
    pos = a_position;

    col = gradient_color(pos);

    p.x = dot(u_view[0].xy, a_position.xy) + u_view[0][2];
    p.y = dot(u_view[1].xy, a_position.xy) + u_view[1][2];

    gl_Position = vec4(p.xy, 0, 1.);
}